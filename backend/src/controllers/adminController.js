import User from "../models/user.js";
import Project from "../models/project.js";
import Proposal from "../models/proposal.js";
import Escrow from "../models/escrow.js";
import Review from "../models/review.js";

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è Dashboard
export const getDashboardStats = async (req, res) => {
  try {
    const users = await User.countDocuments();
    const freelancers = await User.countDocuments({ role: "freelancer" });
    const employers = await User.countDocuments({ role: "employer" });
    const projects = await Project.countDocuments();
    const escrows = await Escrow.countDocuments();
    const completedProjects = await Project.countDocuments({
      status: "completed",
    });

    res.json({
      users,
      freelancers,
      employers,
      projects,
      escrows,
      completedProjects,
    });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
};

// üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
export const getAllUsers = async (req, res) => {
  const users = await User.find().select("-password");
  res.json(users);
};

// üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const blockUser = async (req, res) => {
  const { id } = req.params;
  const user = await User.findByIdAndUpdate(
    id,
    { isBlocked: true },
    { new: true }
  );
  res.json(user);
};

// ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const unblockUser = async (req, res) => {
  const { id } = req.params;
  const user = await User.findByIdAndUpdate(
    id,
    { isBlocked: false },
    { new: true }
  );
  res.json(user);
};

// ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const deleteUser = async (req, res) => {
  const { id } = req.params;
  await User.findByIdAndDelete(id);
  res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω" });
};

// üìÇ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
export const getAllProjects = async (req, res) => {
  try {
    const projects = await Project.find()
      .populate("employer", "name email")
      .populate("escrow")
      .populate("proposals");
    res.json(projects);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤", error });
  }
};

// –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
export const deleteProject = async (req, res) => {
  const { id } = req.params;
  try {
    await Project.findByIdAndDelete(id);
    res.json({ message: "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª—ë–Ω" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞", error });
  }
};

// üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
export const getAllProposals = async (req, res) => {
  try {
    const proposals = await Proposal.find()
      .populate("freelancer", "name email")
      .populate({
        path: "project",
        select: "title employer",
        populate: { path: "employer", select: "name email" },
      });

    res.json(proposals);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤", error });
  }
};

// –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫
export const deleteProposal = async (req, res) => {
  const { id } = req.params;
  try {
    await Proposal.findByIdAndDelete(id);
    res.json({ message: "–û—Ç–∫–ª–∏–∫ —É–¥–∞–ª—ë–Ω" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞", error });
  }
};

// üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö escrow
export const getAllEscrows = async (req, res) => {
  try {
    const escrows = await Escrow.find({ type: { $ne: "topup" } })
      .populate("project", "title")
      .populate("employer", "name email")
      .populate("freelancer", "name email");
    res.json(escrows);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ escrow", error });
  }
};

//–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ escrow
export const forceReleaseEscrow = async (req, res) => {
  const { id } = req.params;
  try {
    const escrow = await Escrow.findById(id);
    if (!escrow || escrow.status !== "funded") {
      return res.status(400).json({ message: "Escrow –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–ª–∞—á–µ–Ω" });
    }

    const freelancer = await User.findById(escrow.freelancer);
    freelancer.balance += escrow.amount;
    escrow.status = "released";

    await freelancer.save();
    await escrow.save();

    res.json({ message: "Escrow –≤—ã–ø–ª–∞—á–µ–Ω —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—É" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–ª–∞—Ç–µ", error });
  }
};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ escrow
export const forceRefundEscrow = async (req, res) => {
  const { id } = req.params;
  try {
    const escrow = await Escrow.findById(id);
    if (!escrow || escrow.status !== "funded") {
      return res
        .status(400)
        .json({ message: "Escrow –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â—ë–Ω" });
    }

    const employer = await User.findById(escrow.employer);
    employer.balance += escrow.amount;
    escrow.status = "rejected";

    await employer.save();
    await escrow.save();

    res.json({ message: "Escrow –≤–æ–∑–≤—Ä–∞—â—ë–Ω —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ", error });
  }
};

// üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤
export const getAllReviews = async (req, res) => {
  try {
    const reviews = await Review.find()
      .populate("fromUser", "name email")
      .populate("toUser", "name email")
      .populate("project", "title");
    res.json(reviews);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤", error });
  }
};

// –£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤
export const deleteReview = async (req, res) => {
  const { id } = req.params;
  try {
    await Review.findByIdAndDelete(id);
    res.json({ message: "–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞", error });
  }
};
