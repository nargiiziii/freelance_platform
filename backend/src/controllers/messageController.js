import Chat from "../models/chat.js";
import Message from "../models/message.js";

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
export const createChat = async (req, res) => {
  const { receiverId } = req.body;
  const senderId = req.user.id;

  const existingChat = await Chat.findOne({
    members: { $all: [senderId, receiverId] },
  });

  if (existingChat) return res.json(existingChat);

  const newChat = await Chat.create({ members: [senderId, receiverId] });
  res.status(201).json(newChat);
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserChats = async (req, res) => {
  const userId = req.user.id;

  const chats = await Chat.find({ members: userId })
    .populate("members", "name role")
    .populate({
      path: "lastMessage",
      select: "content sender createdAt",
    });

  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –ø–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const enrichedChats = await Promise.all(
    chats.map(async (chat) => {
      const partner = chat.members.find((m) => m._id.toString() !== userId);
      const unreadCount = await Message.countDocuments({
        chatId: chat._id,
        sender: { $ne: userId },
        read: false,
      });

      return {
        _id: chat._id,
        members: chat.members,
        lastMessage: chat.lastMessage,
        unreadCount,
        partner, 
      };
    })
  );

  res.json(enrichedChats);
};


// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
export const getChatMessages = async (req, res) => {
  const { chatId } = req.params;
  const userId = req.user.id;

  // üü© –°–¥–µ–ª–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏
  await Message.updateMany(
    { chatId, sender: { $ne: userId }, read: false },
    { $set: { read: true } }
  );

  const messages = await Message.find({ chatId }).populate("sender", "name");
  res.json(messages);
};

// ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
export const sendMessage = async (req, res) => {
  try {
    const { content } = req.body;
    const { chatId } = req.params;
    const sender = req.user.id;

    if (!content || !chatId) {
      return res.status(400).json({ message: "–¢–µ–∫—Å—Ç –∏ chatId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    const newMsg = await Message.create({
      chatId,
      content,
      sender,
      read: false,
    });

    const chat = await Chat.findById(chatId);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    const receiver = chat.members.find((m) => m.toString() !== sender);

    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
    chat.lastMessage = newMsg._id;
    if (!chat.unreadBy.includes(receiver)) {
      chat.unreadBy.push(receiver);
    }

    await chat.save();

    const populated = await newMsg.populate("sender", "name");
    res.status(201).json(populated);
  } catch (error) {
    // console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    res.status(500).json({ message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};


// ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ (–ø–æ —Å–æ–∫–µ—Ç—É –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)
export const markMessagesAsRead = async (req, res) => {
  const { chatId } = req.params;
  const userId = req.user.id;

  try {
    // –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    await Message.updateMany(
      { chatId, sender: { $ne: userId }, read: false },
      { $set: { read: true } }
    );

    // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ unreadBy –≤ —á–∞—Ç–µ
    await Chat.findByIdAndUpdate(chatId, {
      $pull: { unreadBy: userId },
    });

    res.json({ message: "–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ" });
  } catch (error) {
    // console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ read:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏" });
  }
};
