import Escrow from "../models/escrow.js";
import Project from "../models/project.js";
import User from "../models/user.js"; // ‚¨ÖÔ∏è –¥–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç

// üîê –°–æ–∑–¥–∞—Ç—å escrow (—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∑–∞–º–æ—Ä–æ–∑–∫—É)
export const createEscrow = async (req, res) => {
  try {
    const { projectId, freelancerId, amount } = req.body;
    const employer = req.user.id;

    const escrow = await Escrow.create({
      project: projectId,
      employer,
      freelancer: freelancerId,
      amount,
    });

    // –°–≤—è–∑—ã–≤–∞–µ–º escrow —Å –ø—Ä–æ–µ–∫—Ç–æ–º
    await Project.findByIdAndUpdate(projectId, { escrow: escrow._id });

    res.status(201).json(escrow);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// üí∏ –í—ã–ø—É—Å—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—É
export const releaseFunds = async (req, res) => {
  try {
    const { escrowId } = req.params;

    const escrow = await Escrow.findById(escrowId);
    if (!escrow) return res.status(404).json({ message: "Escrow –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    if (escrow.status !== "funded")
      return res.status(400).json({ message: "Escrow –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" });

    const freelancer = await User.findById(escrow.freelancer);
    if (!freelancer)
      return res.status(404).json({ message: "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    freelancer.balance += escrow.amount;
    escrow.status = "released";

    await Promise.all([freelancer.save(), escrow.save()]);
    // ‚¨áÔ∏è –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ closed
    const project = await Project.findById(escrow.project);
    if (project) {
      project.status = "closed";
      await project.save();
    }

    res.json({ message: "–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—É", escrow });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// ‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é
export const refundFunds = async (req, res) => {
  try {
    const { escrowId } = req.params;

    const escrow = await Escrow.findById(escrowId);
    if (!escrow) return res.status(404).json({ message: "Escrow –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    if (escrow.status !== "funded") {
      return res
        .status(400)
        .json({ message: "–°—Ä–µ–¥—Å—Ç–≤–∞ —É–∂–µ –≤—ã–ø—É—â–µ–Ω—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã" });
    }

    const employer = await User.findById(escrow.employer);
    if (!employer)
      return res.status(404).json({ message: "–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    // ‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏
    employer.balance += escrow.amount;
    await employer.save();

    // ‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å escrow
    escrow.status = "rejected";
    await escrow.save();

    // ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
    const project = await Project.findById(escrow.project);
    if (project) {
      project.status = "closed"; // –∏–ª–∏ "closed"
      await project.save();
    }

    // ‚úÖ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞
    const Proposal = (await import("../models/proposal.js")).default;
    const proposal = await Proposal.findOne({
      project: escrow.project,
      freelancer: escrow.freelancer,
    });

    if (proposal) {
      proposal.status = "rejected"; // –∏–ª–∏ "rejected"
      await proposal.save();
    }

    res.json({ message: "–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é", escrow });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤:", err);
    res.status(500).json({ message: err.message });
  }
};


// üìÑ –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ª—É—á—à–µ–Ω–æ)

export const getTransactionHistory = async (req, res) => {
  try {
    const userId = String(req.user.id);

    const escrows = await Escrow.find({
      $or: [{ employer: userId }, { freelancer: userId }],
    })
      .populate("employer", "name _id")
      .populate("freelancer", "name _id")
      .sort({ createdAt: -1 });

    const formatted = escrows
      .filter((e) => {
        // ‚ö†Ô∏è –§—Ä–∏–ª–∞–Ω—Å–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        const isUserFreelancer = String(e.freelancer._id) === userId;
        if (isUserFreelancer && e.status !== "released") return false;
        return true;
      })
      .map((e) => {
        const isUserEmployer = String(e.employer._id) === userId;
        const isUserFreelancer = String(e.freelancer._id) === userId;

        const from = e.employer.name;
        const to = e.freelancer.name;

        let direction = "outcome";

        // ‚úÖ –§—Ä–∏–ª–∞–Ω—Å–µ—Ä –ø–æ–ª—É—á–∏–ª –¥–µ–Ω—å–≥–∏
        if (e.status === "released" && isUserFreelancer) {
          direction = "income";
        }

        // ‚úÖ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –≤–æ–∑–≤—Ä–∞—Ç
        if (e.status === "rejected" && isUserEmployer) {
          direction = "income";
        }

        const signAmount = direction === "income" ? `+${e.amount}` : `-${e.amount}`;

        return {
          date: e.createdAt.toLocaleDateString(),
          from,
          to,
          amount: signAmount,
          status:
            e.status === "funded"
              ? "–£—Å–ø–µ—à–Ω–æ"
              : e.status === "pending"
              ? "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
              : e.status === "released"
              ? "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
              : e.status === "rejected"
              ? "–í–æ–∑–≤—Ä–∞—Ç"
              : "–°–ø–æ—Ä",
          direction,
        };
      });

    res.json(formatted);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ getTransactionHistory:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏" });
  }
};
