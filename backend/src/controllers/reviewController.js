import Review from "../models/review.js";
import Project from "../models/project.js";

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
export const createReview = async (req, res) => {
  try {
    const { toUser, projectId, rating, comment } = req.body;
    const fromUser = req.user.id;

    const existingReview = await Review.findOne({
      fromUser,
      toUser,
      project: projectId,
    });
    if (existingReview) {
      return res.status(400).json({
        message:
          "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É",
      });
    }

    const project = await Project.findById(projectId);
    if (!project || project.status !== "closed") {
      return res
        .status(400)
        .json({ message: "–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const review = await Review.create({
      fromUser,
      toUser,
      project: projectId,
      rating,
      comment,
    });

    res.status(201).json(review);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserReviews = async (req, res) => {
  try {
    const { userId } = req.params;

    console.log("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
    const reviews = await Review.find({ toUser: userId })
      .populate("fromUser", "name _id")
      .sort({ createdAt: -1 });
    console.log("üì§ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤:", reviews.length);

    res.json(reviews);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
export const getMyReviews = async (req, res) => {
  try {
    const fromUser = req.user.id;
    const reviews = await Review.find({ fromUser }) // üí• –∑–¥–µ—Å—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
      .populate("toUser", "name _id") // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å fromUser ‚Üí toUser
      .sort({ createdAt: -1 });
    res.json(reviews);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
