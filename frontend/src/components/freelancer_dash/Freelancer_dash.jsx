import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector, useDispatch } from "react-redux";
import { getFreelancerProjects } from "../../redux/features/projectSlice";
import AddPortfolioModal from "../addPortfolioModal/AddPortfolioModal";
import style from "./Freelancer_dash.module.scss";
import ProjectListForFreelancer from "../projectListForFreelancer/ProjectListForFreelancer";
import SubmitWorkModal from "../submitWork/SubmitWorkModal";
import EscrowCardd from "../escrowCardd/EscrowCardd";

function FreelancerDash() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const user = useSelector((state) => state.auth.user);
  const projects = useSelector((state) => state.projects.freelancerProjects);

  const [activeSection, setActiveSection] = useState("–ü—Ä–æ—Ñ–∏–ª—å");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [showSubmitModal, setShowSubmitModal] = useState(null);
  const [portfolio, setPortfolio] = useState([]);
  const [filteredProjects, setFilteredProjects] = useState([]);
  const [filterStatus, setFilterStatus] = useState("all");

  const sections = ["–ü—Ä–æ—Ñ–∏–ª—å", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", "–û—Ç–∑—ã–≤—ã"];

  useEffect(() => {
    dispatch(getFreelancerProjects());
  }, [dispatch]);
  useEffect(() => {
    console.log("Projects:", projects);
  }, [projects]);

  useEffect(() => {
    if (user?.portfolio) setPortfolio(user.portfolio);
  }, [user]);

  useEffect(() => {
    if (filterStatus === "all") {
      setFilteredProjects(projects);
    } else {
      setFilteredProjects(
        projects.filter((project) => project.status === filterStatus)
      );
    }
  }, [filterStatus, projects]);

  const handleProjectAdded = (updatedUser) => {
    setPortfolio(updatedUser.portfolio || []);
  };

  const handleEditProfile = () => {
    navigate("/edit-profile");
  };

  if (!user) return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  return (
    <div className={style.freelancerContent}>
      <div className={style.profile}>
        {user.avatar ? (
          <img
            className={style.avatar}
            src={`http://localhost:3000/${user.avatar}`}
            alt="Avatar"
          />
        ) : (
          <div className={style.avatarPlaceholder}>
            {user.name?.[0]?.toUpperCase() || "U"}
          </div>
        )}
        <div className={style.info}>
          <p className={style.name}>{user.name || "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
          <p className={style.role}>{user.role || "–†–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞"}</p>
          <p className={style.balance}>
            <strong>–ë–∞–ª–∞–Ω—Å:</strong>{" "}
            {user.balance?.toLocaleString("ru-RU") || 0}‚ÇΩ
          </p>
          <button onClick={handleEditProfile} className={style.editButton}>
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
          </button>
        </div>
      </div>

      <div className={style.rightSide}>
        <aside className={style.sidebar}>
          <ul>
            {sections.map((section) => (
              <li
                key={section}
                className={activeSection === section ? style.activeSection : ""}
                onClick={() => setActiveSection(section)}
                role="button"
                tabIndex={0}
                onKeyDown={(e) => {
                  if (e.key === "Enter" || e.key === " ") {
                    setActiveSection(section);
                  }
                }}
              >
                {section}
              </li>
            ))}
          </ul>
        </aside>

        <main className={style.sectionContent}>
          {activeSection === "–ü—Ä–æ—Ñ–∏–ª—å" && (
            <section className={style.section}>
              <h3>–ü—Ä–æ—Ñ–∏–ª—å</h3>
              <p>
                <strong>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</strong> {user.bio || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}
              </p>
              <p>
                <strong>–ù–∞–≤—ã–∫–∏:</strong>{" "}
                {user.skills?.length ? user.skills.join(", ") : "–ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤"}
              </p>
              <p>
                <strong>–°—Ç–∞—Ç—É—Å:</strong>{" "}
                {user.isAvailable ? "–î–æ—Å—Ç—É–ø–µ–Ω" : "–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω"}
              </p>
              <p>
                <strong>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:</strong>{" "}
                {user.completedProjectsCount || 0}
              </p>
            </section>
          )}

          {activeSection === "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã" && (
            <section className={style.section}>
              <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã</h3>
              <div>
                <button onClick={() => setFilterStatus("all")}>–í—Å–µ</button>
                <button onClick={() => setFilterStatus("open")}>
                  –û—Ç–∫—Ä—ã—Ç—ã–µ
                </button>
                <button onClick={() => setFilterStatus("completed")}>
                  –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
                </button>
              </div>
              {filteredProjects?.length ? (
                <ul>
                  {filteredProjects.map((project) => (
                    <li key={project._id}>
                      <h4>
                        {project.title} - –°—Ç–∞—Ç—É—Å: {project.status}
                      </h4>
                      {project.status === "in_progress" && (
                        <button onClick={() => setShowSubmitModal(project._id)}>
                          üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
                        </button>
                      )}
                      <EscrowCardd project={project} />
                    </li>
                  ))}
                </ul>
              ) : (
                <p>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
              )}
            </section>
          )}

          {activeSection === "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ" && (
            <section className={style.section}>
              <h3>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</h3>
              <button
                className={style.addProjectButton}
                onClick={() => setIsModalOpen(true)}
              >
                + –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
              </button>
              {portfolio?.length ? (
                <div className={style.portfolioGrid}>
                  {portfolio.map((item, i) => (
                    <div key={item._id || i} className={style.portfolioItem}>
                      <img
                        src={
                          item.image
                            ? `http://localhost:3000/uploads/${item.image}`
                            : "https://via.placeholder.com/200x150"
                        }
                        alt={item.title || "Project image"}
                        className={style.portfolioImage}
                      />
                      <div>
                        <strong>{item.title}</strong>
                        <p>{item.description}</p>
                        <a
                          href={item.link}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          –°–º–æ—Ç—Ä–µ—Ç—å
                        </a>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>
              )}
              <AddPortfolioModal
                isOpen={isModalOpen}
                onClose={() => setIsModalOpen(false)}
                onProjectAdded={handleProjectAdded}
                userId={user._id}
              />
            </section>
          )}

          {activeSection === "–û—Ç–∑—ã–≤—ã" && (
            <section className={style.section}>
              <h3>–û—Ç–∑—ã–≤—ã</h3>
              {user.reviews?.length ? (
                <ul>
                  {user.reviews.map((review, i) => (
                    <li key={review.id || i}>
                      <strong>{review.authorName || "–ê–Ω–æ–Ω–∏–º"}:</strong>{" "}
                      {review.comment} ‚Äî –û—Ü–µ–Ω–∫–∞: ‚≠ê {review.rating}
                    </li>
                  ))}
                </ul>
              ) : (
                <p>–û—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</p>
              )}
            </section>
          )}
        </main>
      </div>

      {showSubmitModal && (
        <SubmitWorkModal
          projectId={showSubmitModal}
          onClose={() => setShowSubmitModal(null)}
        />
      )}
    </div>
  );
}

export default FreelancerDash;
