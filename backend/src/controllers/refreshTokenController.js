import User from "../models/user.js";
import jwt from "jsonwebtoken";
import crypto from "crypto";

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
const generateTokens = (userId) => {
  const accessToken = jwt.sign({ id: userId }, process.env.JWT_SECRET, {
    expiresIn: "15m", // –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫
  });

  const refreshToken = crypto.randomBytes(64).toString("hex");

  return { accessToken, refreshToken };
};

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
export const refreshToken = async (req, res) => {
  // üì¶ –ß–∏—Ç–∞–µ–º refresh token –∏–∑ cookie
  const refreshToken = req.cookies.refreshToken;

  if (!refreshToken) {
    return res.status(401).json({ message: "–ù–µ—Ç refresh —Ç–æ–∫–µ–Ω–∞" });
  }

  try {
    const user = await User.findOne({ refreshToken });

    if (!user) {
      return res.status(403).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π refresh —Ç–æ–∫–µ–Ω" });
    }

    const tokens = generateTokens(user._id);

    user.refreshToken = tokens.refreshToken;
    await user.save();

    // üßÅ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ cookie
    res
      .cookie("accessToken", tokens.accessToken, {
        httpOnly: true,
        secure: true,
        sameSite: "Strict",
        maxAge: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
      })
      .cookie("refreshToken", tokens.refreshToken, {
        httpOnly: true,
        secure: true,
        sameSite: "Strict",
        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
      })
      .json({ message: "–¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
