import axios from "axios";

const instance = axios.create({
  // baseURL: "http://localhost:3000/api",
  baseURL: "https://freelance-platform-oi3p.onrender.com/",
  withCredentials: true,
});

let isRefreshing = false;
let alreadyLoggedOutDueToBlock = false;

instance.interceptors.response.use(
  (response) => response,

  async (error) => {
    const originalRequest = error.config;

    // üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    if (
      error.response?.status === 403 &&
      !alreadyLoggedOutDueToBlock &&
      !window.location.pathname.includes("/login") // ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ: –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ /login
    ) {
      const message = error.response.data?.message;

      if (
        message === "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" ||
        message === "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
      ) {
        alreadyLoggedOutDueToBlock = true;

        // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ store
        localStorage.clear();

        if (window.store) {
          window.store.dispatch({ type: "auth/logoutUser/fulfilled" });
        }

        // ‚õîÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        setTimeout(() => {
          alert("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
          window.location.href = "/login";
        }, 0);

        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        return new Promise(() => {});
      }
    }

    // üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ 401
    const isUnauthorized = error.response?.status === 401;
    const isNotRetry = !originalRequest._retry;
    const isNotAuthRoute = !originalRequest.url.includes("/auth/login") &&
                           !originalRequest.url.includes("/auth/register") &&
                           !originalRequest.url.includes("/auth/refresh");
    const requiresAuth = originalRequest.requiresAuth !== false;

    if (isUnauthorized && isNotRetry && isNotAuthRoute && requiresAuth) {
      if (isRefreshing) return Promise.reject(error);

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        await instance.get("/auth/refresh");
        isRefreshing = false;
        return instance(originalRequest);
      } catch (refreshError) {
        isRefreshing = false;
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default instance;
