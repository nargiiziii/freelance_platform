// backend/src/controllers/projectController.js
import Project from "../models/project.js";
import Proposal from "../models/proposal.js";
import User from "../models/user.js"; // üí° –±—ã–ª–æ –Ω—É–∂–Ω–æ –¥–ª—è completeProject

export const getFreelancerProjects = async (req, res) => {
  try {
    const freelancerId = req.user._id;

    const proposals = await Proposal.find({
      freelancer: freelancerId,
      status: "accepted",
    }).populate("project");

    const activeProjects = proposals
      .filter(
        (p) =>
          p.project &&
          ["in_progress", "submitted", "completed"].includes(p.project.status)
      )
      .map((p) => p.project);

    res.json(activeProjects);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (employer)
export const createProject = async (req, res) => {
  try {
    const { title, description, skillsRequired, budget } = req.body;
    const employer = req.user.id;

    const project = new Project({
      title,
      description,
      skillsRequired,
      budget,
      employer,
      status: "open",
      // escrow –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞—ë–º –∑–¥–µ—Å—å ‚Äî —Å–æ–∑–¥–∞—à—å –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä –ø—Ä–∏–º–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    });

    await project.save();

    res.status(201).json(project);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–Ω–∏–º–∞—Ç–µ–ª—è
export const getEmployerProjects = async (req, res) => {
  try {
    const projects = await Project.find({ employer: req.user.id }).populate({
      path: "proposals",
      populate: [
        { path: "freelancer", select: "name" },
        {
          path: "project",
          populate: { path: "escrow" }, // üî• –≠–¢–û –ì–õ–ê–í–ù–û–ï!
        },
      ],
    });

    console.log("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤:", projects.length);
    res.json(projects);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
export const getOpenProjects = async (req, res) => {
  try {
    const projects = await Project.find({ status: "open" });
    res.json(projects);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

export const submitWork = async (req, res) => {
  try {
    const { projectId } = req.params;
    const { submittedFileUrl } = req.body; // –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É

    const project = await Project.findById(projectId);
    if (!project) return res.status(404).json({ message: "Project not found" });

    project.submittedFileUrl = submittedFileUrl;
    project.status = "submitted";
    await project.save();

    res.json({ message: "Work submitted", project });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

export const completeProject = async (req, res) => {
  try {
    const { projectId } = req.params;
    const project = await Project.findById(projectId).populate("escrow");
    if (!project) return res.status(404).json({ message: "Project not found" });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    project.status = "completed";
    await project.save();

    // –í—ã–ø–ª–∞—Ç–∞ –∏–∑ escrow
    const escrow = project.escrow;
    if (escrow) {
      escrow.status = "released";
      await escrow.save();

      // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
      await User.findByIdAndUpdate(escrow.freelancer, {
        $inc: { balance: escrow.amount },
      });
    }

    res.json({ message: "Project completed and funds released", project });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};
