import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { getMyProposals, submitWork } from "../../redux/features/proposalSlice";
import { fetchUserReviews } from "../../redux/features/reviewSlice";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import style from "./MyProposalsFreel.module.scss";
import ReviewForm from "../../components/reviewForm/ReviewForm";
import { removeNotification } from "../../redux/features/notificationSlice";

const MyProposalsFreel = () => {
  const dispatch = useDispatch();
  const { myProposals, status, error } = useSelector((state) => state.proposal);
  const { reviews } = useSelector((state) => state.reviews);

  const [selectedFile, setSelectedFile] = useState({});
  const [submitting, setSubmitting] = useState({});

  useEffect(() => {
    dispatch(getMyProposals());
    dispatch(fetchUserReviews());
  }, [dispatch]);

  useEffect(() => {
    if (myProposals.length > 0) {
      const idsToRemove = [
        "msg",
        ...myProposals.map((p) => `acc-${p._id}`),
        ...myProposals.map((p) => `esc-${p._id}`),
      ];
      idsToRemove.forEach((id) => dispatch(removeNotification(id)));
    }
  }, [myProposals, dispatch]);

  const handleFileChange = (proposalId, file) => {
    setSelectedFile((prev) => ({ ...prev, [proposalId]: file }));
  };

  const handleSubmit = async (proposalId, projectId) => {
    const file = selectedFile[proposalId];
    if (!file) {
      toast.warn("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.");
      return;
    }

    setSubmitting((prev) => ({ ...prev, [proposalId]: true }));

    try {
      await dispatch(submitWork({ projectId, file })).unwrap();
      toast.success("–†–∞–±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!");
      await dispatch(getMyProposals());
    } catch (err) {
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.");
    } finally {
      setSubmitting((prev) => ({ ...prev, [proposalId]: false }));
    }
  };

  return (
    <div className={style.container}>
      <h2>–ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏</h2>
      {status === "loading" && <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
      {error && <p className={style.error}>{error}</p>}
      {Array.isArray(myProposals) && myProposals.length === 0 ? (
        <p>–í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç–∫–ª–∏–∫–æ–≤.</p>
      ) : (
        <ul className={style.list}>
          {myProposals.map((proposal) => {
            const hasLeftReview = reviews.some(
              (rev) => rev.project === proposal.project?._id
            );

            return (
              <li key={proposal._id} className={style.card}>
                <h3>{proposal.project?.title || "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª—ë–Ω"}</h3>

                {proposal.project?.status === "closed" &&
                  proposal.project?.escrow?.status === "released" && (
                    <p className={style.completedLabel}>
                      ‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞
                    </p>
                  )}

                {proposal.project?.status === "closed" &&
                  proposal.escrow?.status === "released" && (
                    <p className={style.statusPaid}>üí∞ –ü—Ä–æ–µ–∫—Ç –æ–ø–ª–∞—á–µ–Ω</p>
                  )}

                <p>
                  <strong>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong> {proposal.coverLetter}
                </p>
                <p>
                  <strong>–¶–µ–Ω–∞:</strong> {proposal.price}‚ÇΩ
                </p>
                <p>
                  <strong>–°—Ç–∞—Ç—É—Å:</strong>{" "}
                  {proposal.status === "pending" && "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"}
                  {proposal.status === "accepted" && "‚úÖ –ü—Ä–∏–Ω—è—Ç"}
                  {proposal.status === "rejected" && "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω"}
                  {proposal.status === "submitted" && "üì§ –†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}
                </p>

                {proposal.status === "accepted" && (
                  <div className={style.submitBlock}>
                    <input
                      type="file"
                      onChange={(e) =>
                        handleFileChange(proposal._id, e.target.files[0])
                      }
                    />
                    <button
                      onClick={() =>
                        handleSubmit(proposal._id, proposal.project._id)
                      }
                      disabled={submitting[proposal._id]}
                    >
                      {submitting[proposal._id]
                        ? "–û—Ç–ø—Ä–∞–≤–∫–∞..."
                        : "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É"}
                    </button>
                  </div>
                )}

                {proposal.status === "submitted" && proposal.workFile && (
                  <p>
                    üìé –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª:{" "}
                    <a
                      href={`http://localhost:3000/uploads/${proposal.workFile}`}
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      {proposal.workFile}
                    </a>
                  </p>
                )}

                {proposal.project?.status === "closed" &&
                  proposal.project?.escrow?.status === "released" &&
                  !hasLeftReview && (
                    <div className={style.reviewBlock} style={{ marginTop: "15px" }}>
                      <h4>–û—Ü–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞</h4>
                      <ReviewForm
                        toUserId={proposal.project?.employer?._id}
                        projectId={proposal.project?._id}
                        onSubmitSuccess={() => dispatch(fetchUserReviews())}
                      />
                    </div>
                  )}
              </li>
            );
          })}
        </ul>
      )}
    </div>
  );
};

export default MyProposalsFreel;
